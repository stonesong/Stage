
@inproceedings{moser_comparative_2008,
	title = {A comparative analysis of the efficiency of change metrics and static code attributes for defect prediction},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4814129},
	urldate = {2013-12-02},
	booktitle = {{ACM/IEEE} 30th International Conference on Software Engineering},
	author = {Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
	year = {2008},
	pages = {181–190},
	file = {[PDF] à partir de researchgate.net:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/FPVQGBKX/Moser et al. - 2008 - A comparative analysis of the efficiency of change.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RSV35SSD/cookiedetectresponse.html:text/html}
}

@article{goeminne_comparison_2013,
	series = {Special section on software evolution, adaptability, and maintenance \& Special section on the Brazilian Symposium on Programming Languages},
	title = {A comparison of identity merge algorithms for software repositories},
	volume = {78},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/S0167642311002048},
	doi = {10.1016/j.scico.2011.11.004},
	abstract = {Software repository mining research extracts and analyses data originating from multiple software repositories to understand the historical development of software systems, and to propose better ways to evolve such systems in the future. Of particular interest is the study of the activities and interactions between the persons involved in the software development process. The main challenge with such studies lies in the ability to determine the identities (e.g., logins or e-mail accounts) in software repositories that represent the same physical person. To achieve this, different identity merge algorithms have been proposed in the past. This article provides an objective comparison of identity merge algorithms, including some improvements over existing algorithms. The results are validated on a selection of large ongoing open source software projects.},
	number = {8},
	urldate = {2014-05-05},
	journal = {Science of Computer Programming},
	author = {Goeminne, Mathieu and Mens, Tom},
	month = aug,
	year = {2013},
	keywords = {Comparison, Empirical Software Engineering, Identity merging, open source, software evolution, software repository mining},
	pages = {971--986},
	file = {1-s2.0-S0167642311002048-main.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/92P5AISU/1-s2.0-S0167642311002048-main.pdf:application/pdf;ScienceDirect Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/FVEZAJMF/Goeminne et Mens - 2013 - A comparison of identity merge algorithms for soft.pdf:application/pdf;ScienceDirect Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RCQQ64XF/S0167642311002048.html:text/html}
}

@article{fenton_critique_1999,
	title = {A Critique of Software Defect Prediction Models},
	volume = {25},
	issn = {0098-5589},
	url = {http://dx.doi.org/10.1109/32.815326},
	doi = {10.1109/32.815326},
	number = {5},
	journal = {{IEEE} Trans. Softw. Eng.},
	author = {Fenton, Norman E. and Neil, Martin},
	month = sep,
	year = {1999},
	pages = {675–689},
	file = {predictionModelCritic.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/N7NX4UPN/predictionModelCritic.pdf:application/pdf}
}

@inproceedings{kim_field_2012,
	address = {New York, {NY}, {USA}},
	series = {{FSE} '12},
	title = {A Field Study of Refactoring Challenges and Benefits},
	isbn = {978-1-4503-1614-9},
	url = {http://doi.acm.org.gate6.inist.fr/10.1145/2393596.2393655},
	doi = {10.1145/2393596.2393655},
	abstract = {It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multi-year, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds that the binary modules refactored by this team experienced significant reduction in the number of inter-module dependencies and post-release defects, indicating a visible benefit of refactoring.},
	urldate = {2014-02-19},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th International Symposium on the Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
	year = {2012},
	keywords = {churn, churn, component dependencies, component dependencies, defects, defects, empirical study, Empirical study, refactoring, refactoring, software evolution, software evolution},
	pages = {50:1–50:11},
	file = {a50-kim.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/UPTHN7DJ/a50-kim.pdf:application/pdf;kim-fse-2012.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/6B4SMEWU/kim-fse-2012.pdf:application/pdf}
}

@inproceedings{moser_analysis_2008,
	address = {New York, {NY}, {USA}},
	series = {{ESEM} '08},
	title = {Analysis of the Reliability of a Subset of Change Metrics for Defect Prediction},
	isbn = {978-1-59593-971-5},
	url = {http://doi.acm.org/10.1145/1414004.1414063},
	doi = {10.1145/1414004.1414063},
	booktitle = {Proceedings of the Second {ACM-IEEE} International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{ACM}},
	author = {Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
	year = {2008},
	keywords = {defect prediction, feature selection, software metrics},
	pages = {309–311}
}

@inproceedings{matsumoto_analysis_2010,
	title = {An analysis of developer metrics for fault prediction},
	urldate = {2013-09-23},
	booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
	author = {Matsumoto, Shinsuke and Kamei, Yasutaka and Monden, Akito and Matsumoto, Ken-ichi and Nakamura, Masahide},
	year = {2010},
	pages = {18},
	file = {a18-matsumoto.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/3T6XI6KJ/a18-matsumoto.pdf:application/pdf}
}

@inproceedings{yuan_application_2000,
	title = {An application of fuzzy clustering to software quality prediction},
	doi = {10.1109/ASSET.2000.888052},
	booktitle = {Application-Specific Systems and Software Engineering Technology, 2000. Proceedings. 3rd {IEEE} Symposium on},
	author = {Yuan, X. and Khoshgoftaar, {T.M.} and Allen, {E.B.} and Ganesan, K.},
	year = {2000},
	keywords = {Application software, case study, Computer industry, fault-prone modules, fuzzy clustering, fuzzy logic, Fuzzy sets, fuzzy set theory, fuzzy subtractive clustering, Fuzzy systems, large legacy telecommunication system, Linear regression, module-order modeling, multiple linear regression, pattern clustering, Predictive models, robust modeling techniques, software metrics, software quality, software quality prediction, software reliability, telecommunication computing},
	pages = {85--90},
	file = {00888052.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/PQM734SI/00888052.pdf:application/pdf}
}

@inproceedings{antoniol_automatic_2004,
	title = {An automatic approach to identify class evolution discontinuities},
	doi = {10.1109/IWPSE.2004.1334766},
	booktitle = {Software Evolution, 2004. Proceedings. 7th International Workshop on Principles of},
	author = {Antoniol, G. and Di Penta, M. and Merlo, E.},
	month = sep,
	year = {2004},
	keywords = {automatic approach, class evolution discontinuity identification, impact analysis, Information retrieval, Java, Java open source domain name server, Merging, object-oriented programming, open source software, Performance analysis, Programming, public domain software, refactoring activities, refactoring identification, Software development management, software evolution, software features, software internal structure improvement, software maintenance, Software performance, software refactoring, software releases, Software systems, software traceability, vector space information retrieval},
	pages = {31--40},
	file = {iwpse04.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/6RS67WNN/iwpse04.pdf:application/pdf}
}

@inproceedings{dambros_extensive_2010,
	title = {An extensive comparison of bug prediction approaches},
	doi = {10.1109/MSR.2010.5463279},
	booktitle = {Mining Software Repositories ({MSR)}, 2010 7th {IEEE} Working Conference on},
	author = {{D'Ambros}, M. and Lanza, M. and Robbes, R.},
	month = may,
	year = {2010},
	keywords = {bug prediction approaches, Computer bugs, Computer science, Entropy, Informatics, open source software, Power system modeling, Predictive models, program debugging, resource allocation, resource allocation problem, Software defects, software engineering, Software systems, Stability},
	pages = {31--41}
}

@inproceedings{bacchelli_are_2010,
	address = {Berlin, Heidelberg},
	series = {{FASE'10}},
	title = {Are Popular Classes More Defect Prone?},
	isbn = {3-642-12028-8, 978-3-642-12028-2},
	url = {http://dx.doi.org/10.1007/978-3-642-12029-9_5},
	doi = {10.1007/978-3-642-12029-9_5},
	booktitle = {Proceedings of the 13th International Conference on Fundamental Approaches to Software Engineering},
	publisher = {Springer-Verlag},
	author = {Bacchelli, Alberto and {D'Ambros}, Marco and Lanza, Michele},
	year = {2010},
	pages = {59–73},
	file = {fase2010.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/GSAIAXF9/fase2010.pdf:application/pdf}
}

@article{arisholm_systematic_2010,
	title = {A systematic and comprehensive investigation of methods to build and evaluate fault prediction models},
	volume = {83},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121209001605},
	doi = {http://dx.doi.org/10.1016/j.jss.2009.06.055},
	number = {1},
	journal = {Journal of Systems and Software},
	author = {Arisholm, Erik and Briand, Lionel C. and Johannessen, Eivind B.},
	year = {2010},
	note = {{SI:} Top Scholars},
	keywords = {Verification},
	pages = {2 -- 17}
}

@inproceedings{wu_aura:_2010,
	address = {New York, {NY}, {USA}},
	series = {{ICSE} '10},
	title = {{AURA:} a hybrid approach to identify framework evolution},
	isbn = {978-1-60558-719-6},
	url = {http://doi.acm.org/10.1145/1806799.1806848},
	doi = {http://doi.acm.org/10.1145/1806799.1806848},
	booktitle = {Proceedings of the 32nd {ACM/IEEE} International Conference on Software Engineering - Volume 1},
	publisher = {{ACM}},
	author = {Wu, Wei and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano and Kim, Miryung},
	year = {2010},
	pages = {325–334}
}

@article{nikora_building_2006,
	title = {Building high-quality software fault predictors},
	volume = {36},
	issn = {1097-{024X}},
	url = {http://dx.doi.org/10.1002/spe.737},
	doi = {10.1002/spe.737},
	number = {9},
	journal = {Software: Practice and Experience},
	author = {Nikora, Allen P. and Munson, John C.},
	year = {2006},
	keywords = {software fault modeling, Software measurement},
	pages = {949–969},
	file = {737_ftp.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/XXBZIXCK/737_ftp.pdf:application/pdf}
}

@inproceedings{giger_can_2012,
	title = {Can we predict types of code changes? An empirical analysis},
	shorttitle = {Can we predict types of code changes?},
	doi = {10.1109/MSR.2012.6224284},
	abstract = {There exist many approaches that help in pointing developers to the change-prone parts of a software system. Although beneficial, they mostly fall short in providing details of these changes. Fine-grained source code changes ({SCC)} capture such detailed code changes and their semantics on the statement level. These {SCC} can be condition changes, interface modifications, inserts or deletions of methods and attributes, or other kinds of statement changes. In this paper, we explore prediction models for whether a source file will be affected by a certain type of {SCC.} These predictions are computed on the static source code dependency graph and use social network centrality measures and object-oriented metrics. For that, we use change data of the Eclipse platform and the Azureus 3 project. The results show that Neural Network models can predict categories of {SCC} types. Furthermore, our models can output a list of the potentially change-prone files ranked according to their change-proneness, overall and per change type category.},
	booktitle = {2012 9th {IEEE} Working Conference on Mining Software Repositories ({MSR)}},
	author = {Giger, E. and Pinzger, M. and Gall, {H.C.}},
	month = jun,
	year = {2012},
	pages = {217 --226},
	file = {IEEE Xplore Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/A7A88AJV/Giger et al. - 2012 - Can we predict types of code changes An empirical.pdf:application/pdf}
}

@inproceedings{nagappan_change_2010,
	title = {Change Bursts as Defect Predictors},
	doi = {10.1109/ISSRE.2010.25},
	booktitle = {Software Reliability Engineering ({ISSRE)}, 2010 {IEEE} 21st International Symposium on},
	author = {Nagappan, N. and Zeller, A. and Zimmermann, T. and Herzig, K. and Murphy, B.},
	month = nov,
	year = {2010},
	keywords = {change burst, change history, Complexity theory, configuration management, defect predictor, defect prone component, defects, developers, empirical studies, History, Measurement, Predictive models, predictive power, Process metrics, product metrics, Programming, Quality assurance, Software, software development, software metrics, software mining, software quality, software quality assurance, version control, Windows Vista},
	pages = {309--318},
	file = {05635057.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/8RW7NI3M/05635057.pdf:application/pdf}
}

@inproceedings{munson_code_1998,
	title = {Code churn: A measure for estimating the impact of code change},
	shorttitle = {Code churn},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=738486},
	urldate = {2014-01-14},
	booktitle = {Software Maintenance, 1998. Proceedings. International Conference on},
	author = {Munson, John C. and Elbaum, Sebastian G.},
	year = {1998},
	keywords = {code change impact estimation, code churn, code complexity churn, Computer science, embedded systems, Fault detection, Fault diagnosis, fault surrogate, large embedded software system, methodology, Programming, software development process, software evolution process, software maintenance, Software measurement, software metrics, Software systems, Software testing, software tools, source code static measurement, System testing, Tellurium, Time measurement},
	pages = {24–31},
	file = {icsm98.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/AI3DX8T2/icsm98.pdf:application/pdf;[PDF] à partir de unl.edu:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RKS8DXXH/Munson et Elbaum - 1998 - Code churn A measure for estimating the impact of.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/PZKEAING/cookiedetectresponse.html:text/html}
}

@article{eick_does_2001,
	title = {Does Code Decay? Assessing the Evidence from Change Management Data},
	volume = {27},
	issn = {0098-5589},
	url = {http://dx.doi.org/10.1109/32.895984},
	doi = {10.1109/32.895984},
	number = {1},
	journal = {{IEEE} Trans. Softw. Eng.},
	author = {Eick, Stephen G. and Graves, Todd L. and Karr, Alan F. and Marron, J. S. and Mockus, Audris},
	month = jan,
	year = {2001},
	keywords = {effort modeling., fault potential, metrics, software maintenance, span of changes, statistical analysis},
	pages = {1–12},
	file = {10.1.1.37.9674.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/M6USHEUA/10.1.1.37.9674.pdf:application/pdf}
}

@inproceedings{bird_dont_2011,
	address = {New York, {NY}, {USA}},
	series = {{ESEC/FSE} '11},
	title = {Don't touch my code!: examining the effects of ownership on software quality},
	isbn = {978-1-4503-0443-6},
	doi = {10.1145/2025113.2025119},
	booktitle = {Proceedings of the 19th {ACM} {SIGSOFT} symposium and the 13th European conference on Foundations of software engineering},
	publisher = {{ACM}},
	author = {Bird, Christian and Nagappan, Nachiappan and Murphy, Brendan and Gall, Harald and Devanbu, Premkumar},
	year = {2011},
	pages = {4–14},
	file = {bird2011dtm.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/H68ZZ3KT/bird2011dtm.pdf:application/pdf}
}

@article{weyuker_too_2008,
	title = {Do too many cooks spoil the broth? Using the number of developers to enhance defect prediction models},
	volume = {13},
	issn = {1382-3256, 1573-7616},
	shorttitle = {Do too many cooks spoil the broth?},
	url = {http://link.springer.com/article/10.1007/s10664-008-9082-8},
	doi = {10.1007/s10664-008-9082-8},
	language = {en},
	number = {5},
	urldate = {2013-09-23},
	journal = {Empirical Software Engineering},
	author = {Weyuker, Elaine J. and Ostrand, Thomas J. and Bell, Robert M.},
	month = oct,
	year = {2008},
	keywords = {Software faults},
	pages = {539--559},
	file = {Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/WDNK5F3T/Weyuker et al. - 2008 - Do too many cooks spoil the broth Using the numbe.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/84G2REZI/s10664-008-9082-8.html:text/html}
}

@inproceedings{posnett_dual_2013,
	address = {Piscataway, {NJ}, {USA}},
	series = {{ICSE} '13},
	title = {Dual ecological measures of focus in software development},
	urldate = {2013-09-12},
	booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	publisher = {{IEEE} Press},
	author = {Posnett, Daryl and {D'Souza}, Raissa and Devanbu, Premkumar and Filkov, Vladimir},
	year = {2013},
	pages = {452–461},
	file = {p452-posnett.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/7UGSTNKK/p452-posnett.pdf:application/pdf}
}

@article{dambros_evaluating_2012,
	title = {Evaluating defect prediction approaches: a benchmark and an extensive comparison},
	volume = {17},
	shorttitle = {Evaluating defect prediction approaches},
	url = {http://link.springer.com/article/10.1007/s10664-011-9173-9},
	number = {4-5},
	urldate = {2013-12-02},
	journal = {Empirical Software Engineering},
	author = {{D’Ambros}, Marco and Lanza, Michele and Robbes, Romain},
	year = {2012},
	pages = {531–577},
	file = {ComparisonESE.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/CDWSCKBQ/ComparisonESE.pdf:application/pdf;[PDF] à partir de uchile.cl:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/A3FCK8WT/D’Ambros et al. - 2012 - Evaluating defect prediction approaches a benchma.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/TFVCVBWG/s10664-011-9173-9.html:text/html}
}

@article{illes-seifert_exploring_2010,
	title = {Exploring the relationship of a file’s history and its fault-proneness: An empirical method and its application to open source programs},
	volume = {52},
	issn = {0950-5849},
	shorttitle = {Exploring the relationship of a file’s history and its fault-proneness},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584909002109},
	doi = {10.1016/j.infsof.2009.11.010},
	abstract = {Context
The knowledge about particular characteristics of software that are indicators for defects is very valuable for testers because it helps them to focus the testing effort and to allocate their limited resources appropriately.
Objective
In this paper, we explore the relationship between several historical characteristics of files and their defect count.
Method
For this purpose, we propose an empirical approach that uses statistical procedures and visual representations of the data in order to determine indicators for a file’s defect count. We apply this approach to nine open source Java projects across different versions.
Results
Only 4 of 9 programs show moderate correlations between a file’s defects in previous and in current releases in more than half of the analysed releases. In contrast to our expectations, the oldest files represent the most fault-prone files. Additionally, late changes correlate with a file’s defect count only partly. The number of changes, the number of distinct authors performing changes to a file as well as the file’s age are good indicators for a file’s defect count in all projects.
Conclusion
Our results show that a software’s history is a good indicator for ist quality. We did not find one indicator that persists across all projects in an equal manner. Nevertheless, there are several indicators that show significant strong correlations in nearly all projects: {DA} (number of distinct authors) and {FC} (frequency of change). In practice, for each software, statistical analyses have to be performed in order to evaluate the best indicator(s) for a file’s defect count.},
	number = {5},
	urldate = {2014-01-14},
	journal = {Information and Software Technology},
	author = {Illes-Seifert, Timea and Paech, Barbara},
	month = may,
	year = {2010},
	keywords = {Empirical study, Software history/evolution, Software testing},
	pages = {539--558},
	file = {ScienceDirect Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/4BQ2EUXZ/Illes-Seifert et Paech - 2010 - Exploring the relationship of a file’s history and.pdf:application/pdf;ScienceDirect Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/IM7SV945/S0950584909002109.html:text/html}
}

@inproceedings{li_finding_2005,
	title = {Finding predictors of field defects for open source software systems in commonly available data sources: A case study of openbsd},
	booktitle = {{IN:} {METRICS} ’05: {PROCEEDINGS} {OF} {THE} {11TH} {IEEE} {INTERNATIONAL} {SOFTWARE} {METRICS} {SYMPOSIUM}, {IEEE} {COMPUTER} {SOCIETY}},
	author = {Li, Paul Luo and Shaw, Mary and Herbsleb, Jim},
	year = {2005},
	pages = {32},
	file = {Li-finding-2005.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/3J67XR3N/Li-finding-2005.pdf:application/pdf}
}

@article{demeyer_finding_2000,
	title = {Finding Refactorings via Change Metrics},
	volume = {35},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/354222.353183},
	doi = {10.1145/354222.353183},
	number = {10},
	journal = {{SIGPLAN} Not.},
	author = {Demeyer, Serge and Ducasse, Stéphane and Nierstrasz, Oscar},
	month = oct,
	year = {2000},
	keywords = {metrics, object-oriented frameworks, refactoring, reverse engineering, software evolution},
	pages = {166–177},
	file = {p166-demeyer.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/CCSEVUUB/p166-demeyer.pdf:application/pdf}
}

@inproceedings{girba_how_2005,
	title = {How developers drive software evolution},
	doi = {10.1109/IWPSE.2005.21},
	abstract = {As systems evolve their structure change in ways not expected upfront. As time goes by, the knowledge of the developers becomes more and more critical for the process of understanding the system. That is, when we want to understand a certain issue of the system we ask the knowledgeable developers. Yet, in large systems, not every developer is knowledgeable in all the details of the system. Thus, we would want to know which developer is knowledgeable in the issue at hand. In this paper we make use of the mapping between the changes and the author identifiers (e.g., user names) provided by versioning repositories. We first define a measurement for the notion of code ownership. We use this measurement to define the ownership map visualization to understand when and how different developers interacted in which way and in which part of the system. We report the results we obtained on several large systems.},
	booktitle = {Eighth International Workshop on Principles of Software Evolution},
	author = {Girba, T. and Kuhn, A. and Seeberger, M. and Ducasse, S.},
	year = {2005},
	keywords = {Conferences, Documentation},
	pages = {113--122},
	file = {IEEE Xplore Abstract Record:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/8N9AXVQM/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/NMKXR7X5/Girba et al. - 2005 - How developers drive software evolution.pdf:application/pdf}
}

@inproceedings{schroter_if_2006,
	title = {If your bug database could talk},
	volume = {2},
	url = {http://www.st.cs.uni-saarland.de/publications/files/schroeter-isese-2006b.pdf},
	urldate = {2013-10-07},
	booktitle = {Proceedings of the 5th international symposium on empirical software engineering},
	author = {Schröter, Adrian and Zimmermann, Thomas and Premraj, Rahul and Zeller, Andreas},
	year = {2006},
	pages = {18–20},
	file = {If Your Bug Database Could Talk.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/Q5WUBFVA/If Your Bug Database Could Talk.pdf:application/pdf;[PDF] à partir de uni-saarland.de:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/VZFT7WA9/Schröter et al. - 2006 - If your bug database could talk.pdf:application/pdf}
}

@article{steidl_incremental_2014,
	title = {Incremental Origin Analysis of Source Code Files},
	journal = {Proceedings of the 11th Working Conference on Mining Software Repositories},
	author = {Steidl, Daniela and Hummel, Benjamin and Juergens, Elmar},
	year = {2014},
	file = {2014-incremental-origin-analysis-of-source-code-files.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/MUBS4SKU/2014-incremental-origin-analysis-of-source-code-files.pdf:application/pdf}
}

@inproceedings{lavoie_inferring_2012,
	title = {Inferring Repository File Structure Modifications Using Nearest-Neighbor Clone Detection},
	doi = {10.1109/WCRE.2012.42},
	booktitle = {Reverse Engineering ({WCRE)}, 2012 19th Working Conference on},
	author = {Lavoie, T. and Khomh, F. and Merlo, E. and Zou, Ying},
	month = oct,
	year = {2012},
	keywords = {Adempiere {SVN} information, Cloning, file organisation, History, implicit Moves, {JHotDraw}, legacy software systems, Legacy systems, legacy systems re-engineering, Manhattan distance, Measurement, Nearest-Neighbor, nearest-neighbor clone detection, reliability, repository file structure modification inference, revision history, Software clones, software design, software evolution, software experts, software maintenance, Software repository, Software similarity, Software systems, {SVN} repository, systems re-engineering, Tomcat, Vectors},
	pages = {325--334},
	file = {wcre2012-fs.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/Z5SGME5T/wcre2012-fs.pdf:application/pdf}
}

@inproceedings{layman_iterative_2008,
	address = {New York, {NY}, {USA}},
	series = {{ESEM} '08},
	title = {Iterative Identification of Fault-prone Binaries Using In-process Metrics},
	isbn = {978-1-59593-971-5},
	url = {http://doi.acm.org/10.1145/1414004.1414038},
	doi = {10.1145/1414004.1414038},
	booktitle = {Proceedings of the Second {ACM-IEEE} International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{ACM}},
	author = {Layman, Lucas and Kudrjavets, Gunnar and Nagappan, Nachiappan},
	year = {2008},
	keywords = {code churn, fault prediction, regression, statistical models},
	pages = {206–212}
}

@inproceedings{caglayan_merits_2009,
	address = {Washington, {DC}, {USA}},
	series = {{FLOSS} '09},
	title = {Merits of Using Repository Metrics in Defect Prediction for Open Source Projects},
	isbn = {978-1-4244-3720-7},
	url = {http://dx.doi.org/10.1109/FLOSS.2009.5071357},
	doi = {10.1109/FLOSS.2009.5071357},
	booktitle = {Proceedings of the 2009 {ICSE} Workshop on Emerging Trends in {Free/Libre/Open} Source Software Research and Development},
	publisher = {{IEEE} Computer Society},
	author = {Caglayan, Bora and Bener, Ayse and Koch, Stefan},
	year = {2009},
	pages = {31–36},
	file = {05071357.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/JWUPJJUI/05071357.pdf:application/pdf}
}

@inproceedings{ramil_metrics_2000,
	title = {Metrics of software evolution as effort predictors - a case study},
	doi = {10.1109/ICSM.2000.883036},
	booktitle = {Software Maintenance, 2000. Proceedings. International Conference on},
	author = {Ramil, {J.F.} and Lehman, {M.M.}},
	year = {2000},
	keywords = {baseline models, case study, coarse granularity measures, data fitting, effort variation, historical data, homogeneous evolution segments, mainframe operating system kernel, module counts, operating system kernels, prediction errors, predictive power, relative error magnitude, software cost estimation, software effort predictors, software evolution activity indicators, software evolution metrics, software maintenance, software metrics, subsystem counts},
	pages = {163--172},
	file = {00883036.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/2JU7B3CP/00883036.pdf:application/pdf}
}

@inproceedings{nagappan_mining_2006,
	address = {New York, {NY}, {USA}},
	series = {{ICSE} '06},
	title = {Mining metrics to predict component failures},
	isbn = {1-59593-375-1},
	url = {http://doi.acm.org/10.1145/1134285.1134349},
	doi = {10.1145/1134285.1134349},
	booktitle = {Proceedings of the 28th international conference on Software engineering},
	publisher = {{ACM}},
	author = {Nagappan, Nachiappan and Ball, Thomas and Zeller, Andreas},
	year = {2006},
	pages = {452–461},
	file = {TR-2005-149.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RSWFBTTM/TR-2005-149.pdf:application/pdf}
}

@article{meng_mining_????,
	title = {Mining Software Repositories for Accurate Authorship},
	url = {ftp://ftp.cs.wisc.edu/pub/paradyn/papers/Meng13Authorship.pdf},
	urldate = {2013-09-02},
	author = {Meng, Xiaozhu and Miller, Barton P. and Williams, William R. and Bernat, Andrew R.},
	file = {Meng13Authorship.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/BCXBWQMM/Meng13Authorship.pdf:application/pdf}
}

@inproceedings{dambros_relationship_2009,
	title = {On the Relationship Between Change Coupling and Software Defects},
	doi = {10.1109/WCRE.2009.19},
	booktitle = {Reverse Engineering, 2009. {WCRE} '09. 16th Working Conference on},
	author = {{D'Ambros}, M. and Lanza, M. and Robbes, R.},
	month = oct,
	year = {2009},
	keywords = {bug prediction model performance, Change coupling, Computer architecture, Informatics, Information analysis, Joining processes, Predictive models, reverse engineering, software artifact, software change coupling, software defect, Software defects, software design, software maintenance, Software measurement, software metrics, software reliability, software system, Software systems},
	pages = {135--144},
	file = {05328803.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/GMJ73ANZ/05328803.pdf:application/pdf}
}

@article{graves_predicting_2000,
	title = {Predicting Fault Incidence Using Software Change History},
	volume = {26},
	issn = {0098-5589},
	url = {http://dx.doi.org/10.1109/32.859533},
	doi = {10.1109/32.859533},
	number = {7},
	journal = {{IEEE} Trans. Softw. Eng.},
	author = {Graves, Todd L. and Karr, Alan F. and Marron, J. S. and Siy, Harvey},
	month = jul,
	year = {2000},
	keywords = {Aging, change history, change management data, code decay, Degradation, fault incidence, fault potential, History, Length measurement, management of change, metrics, Predictive models, software change history, Software development management, software fault tolerance, software maintenance, Software measurement, software metrics, Software systems, statistical analysis, Time measurement},
	pages = {653–661},
	file = {10.1.1.116.9414.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/KE24N5PE/10.1.1.116.9414.pdf:application/pdf;10.1.1.220.150.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/GB4C9NJ6/10.1.1.220.150.pdf:application/pdf;[PDF] à partir de psu.edu:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/UG4D3IQU/Graves et al. - 2000 - Predicting fault incidence using software change h.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/BD7BXESC/cookiedetectresponse.html:text/html}
}

@inproceedings{hassan_predicting_2009,
	title = {Predicting faults using the complexity of code changes},
	url = {http://dl.acm.org/citation.cfm?id=1555024},
	urldate = {2013-10-28},
	booktitle = {Proceedings of the 31st International Conference on Software Engineering},
	author = {Hassan, Ahmed E.},
	year = {2009},
	pages = {78–88},
	file = {05070510.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/GMVGW4GH/05070510.pdf:application/pdf;icse2009_hassan.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/P4EJ4SD2/icse2009_hassan.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/2N7AXBMN/citation.html:text/html}
}

@article{ostrand_predicting_2005,
	title = {Predicting the Location and Number of Faults in Large Software Systems},
	volume = {31},
	issn = {0098-5589},
	url = {http://dx.doi.org/10.1109/TSE.2005.49},
	doi = {10.1109/TSE.2005.49},
	number = {4},
	journal = {{IEEE} Trans. Softw. Eng.},
	author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
	month = apr,
	year = {2005},
	keywords = {binomial distribution, binomial regression model, empirical study, Fault detection, Fault diagnosis, fault-prone, History, Index Terms- Software faults, large software systems, Personnel, prediction, Predictive models, program testing, regression model, software fault prediction, software fault tolerance, Software systems, Software testing, software testing., Sorting, System testing},
	pages = {340–355},
	file = {01435354.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/557SQQJ8/01435354.pdf:application/pdf;PredictingLocationNumberFaults.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/S9TGA378/PredictingLocationNumberFaults.pdf:application/pdf}
}

@inproceedings{ostrand_programmer-based_2010,
	address = {New York, {NY}, {USA}},
	series = {{PROMISE} '10},
	title = {Programmer-based Fault Prediction},
	isbn = {978-1-4503-0404-7},
	url = {http://doi.acm.org/10.1145/1868328.1868357},
	doi = {10.1145/1868328.1868357},
	booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
	publisher = {{ACM}},
	author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
	year = {2010},
	keywords = {bug ratio, empirical study, fault-prone, prediction, regression model, software faults},
	pages = {19:1–19:10},
	file = {TD_100098.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/ED9CK4XN/TD_100098.pdf:application/pdf}
}

@article{hall_software_2000,
	title = {Software evolution: code delta and code churn},
	volume = {54},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121200000315},
	doi = {http://dx.doi.org/10.1016/S0164-1212(00)00031-5},
	number = {2},
	journal = {Journal of Systems and Software},
	author = {Hall, Gregory A. and Munson, John C.},
	year = {2000},
	note = {Special Issue on Software Maintenance},
	pages = {111 -- 118},
	file = {1-s2.0-S0164121200000315-main.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/3J7KWQ7N/1-s2.0-S0164121200000315-main.pdf:application/pdf}
}

@article{radjenovic_software_2013,
	title = {Software fault prediction metrics: A systematic literature review},
	volume = {55},
	issn = {0950-5849},
	shorttitle = {Software fault prediction metrics},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584913000426},
	doi = {10.1016/j.infsof.2013.02.009},
	abstract = {Context
Software metrics may be used in fault prediction models to improve software quality by predicting fault location.
Objective
This paper aims to identify software metrics and to assess their applicability in software fault prediction. We investigated the influence of context on metrics’ selection and performance.
Method
This systematic literature review includes 106 papers published between 1991 and 2011. The selected papers are classified according to metrics and context properties.
Results
Object-oriented metrics (49\%) were used nearly twice as often compared to traditional source code metrics (27\%) or process metrics (24\%). Chidamber and Kemerer’s ({CK)} object-oriented metrics were most frequently used. According to the selected studies there are significant differences between the metrics used in fault prediction performance. Object-oriented and process metrics have been reported to be more successful in finding faults compared to traditional size and complexity metrics. Process metrics seem to be better at predicting post-release faults compared to any static code metrics.
Conclusion
More studies should be performed on large industrial software systems to find metrics more relevant for the industry and to answer the question as to which metrics should be used in a given context.},
	number = {8},
	urldate = {2014-01-14},
	journal = {Information and Software Technology},
	author = {Radjenović, Danijel and Heričko, Marjan and Torkar, Richard and Živkovič, Aleš},
	month = aug,
	year = {2013},
	keywords = {literature, review, Software fault prediction, Software metric, Systematic, Systematic literature review},
	pages = {1397--1418},
	file = {000d837774c3e143487d18be46c4a28e.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RIHGHCFX/000d837774c3e143487d18be46c4a28e.pdf:application/pdf;ScienceDirect Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/FTNT88V2/Radjenović et al. - 2013 - Software fault prediction metrics A systematic li.pdf:application/pdf;ScienceDirect Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/IS6QPP3P/S0950584913000426.html:text/html}
}

@inproceedings{nagappan_influence_2008,
	title = {The influence of organizational structure on software quality: an empirical case study},
	shorttitle = {The influence of organizational structure on software quality},
	urldate = {2013-08-30},
	booktitle = {Proceedings of the 30th international conference on Software engineering},
	author = {Nagappan, Nachiappan and Murphy, Brendan and Basili, Victor},
	year = {2008},
	pages = {521–530},
	file = {[PDF] à partir de psu.edu:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/HRUQP9KU/Nagappan et al. - 2008 - The influence of organizational structure on softw.pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/PD3CCV8H/citation.html:text/html}
}

@inproceedings{nagappan_use_2005,
	address = {New York, {NY}, {USA}},
	series = {{ICSE} '05},
	title = {Use of relative code churn measures to predict system defect density},
	isbn = {1-58113-963-2},
	url = {http://doi.acm.org/10.1145/1062455.1062514},
	doi = {10.1145/1062455.1062514},
	booktitle = {Proceedings of the 27th international conference on Software engineering},
	publisher = {{ACM}},
	author = {Nagappan, Nachiappan and Ball, Thomas},
	year = {2005},
	pages = {284–292},
	file = {icse05churn.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/DWDCTHSW/icse05churn.pdf:application/pdf}
}

@inproceedings{weyuker_using_2007,
	title = {Using developer information as a factor for fault prediction},
	url = {http://dl.acm.org/citation.cfm?id=1269056},
	urldate = {2013-12-03},
	booktitle = {Proceedings of the Third International Workshop on Predictor Models in Software Engineering},
	author = {Weyuker, Elaine J. and Ostrand, Thomas J. and Bell, Robert M.},
	year = {2007},
	pages = {8},
	file = {04273264.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/45TDE6A6/04273264.pdf:application/pdf;[PDF] à partir de promisedata.org:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/GIBKUKWE/Weyuker et al. - 2007 - Using developer information as a factor for fault .pdf:application/pdf;Snapshot:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/RVUQ3C4C/citation.html:text/html}
}

@inproceedings{nagappan_using_2006,
	address = {Washington, {DC}, {USA}},
	series = {{ISSRE} '06},
	title = {Using Historical In-Process and Product Metrics for Early Estimation of Software Failures},
	isbn = {0-7695-2684-5},
	url = {http://dx.doi.org/10.1109/ISSRE.2006.50},
	doi = {10.1109/ISSRE.2006.50},
	booktitle = {Proceedings of the 17th International Symposium on Software Reliability Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Nagappan, Nachiappan and Ball, Thomas and Murphy, Brendan},
	year = {2006},
	keywords = {Classification tree analysis, Failure analysis, failure proneness estimation, Fault diagnosis, historical predictors, Hydrogen, Large-scale systems, Operating systems, operating systems (computers), post-release failures, product metrics, Programming, software failure estimation, software fault tolerance, software metrics, software product, software quality, Software systems, Software testing, statistical analysis, statistical predictors, Windows operating system, Windows Server 2003, Windows {XP}},
	pages = {62–74},
	file = {04021972.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/ZB4AMRJW/04021972.pdf:application/pdf;04021972.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/Q6WPPFTU/04021972.pdf:application/pdf}
}

@article{godfrey_using_2005,
	title = {Using origin analysis to detect merging and splitting of source code entities},
	volume = {31},
	issn = {0098-5589},
	doi = {10.1109/TSE.2005.28},
	abstract = {Merging and splitting source code entities is a common activity during the lifespan of a software system; as developers rethink the essential structure of a system or plan for a new evolutionary direction, so must they be able to reorganize the design artifacts at various abstraction levels as seems appropriate. However, while the raw effects of such changes may be plainly evident in the new artifacts, the original context of the design changes is often lost. That is, it may be obvious which characters of which files have changed, but it may not be obvious where or why moving, renaming, merging, and/or splitting of design elements has occurred. In this paper, we discuss how we have extended origin analysis (Q. Tu et al., 2002), ({M.W.} Godfrey et al., 2002) to aid in the detection of merging and splitting of files and functions in procedural code; in particular, we show how reasoning about how call relationships have changed can aid a developer in locating where merges and splits have occurred, thereby helping to recover some information about the context of the design change. We also describe a case study of these techniques (as implemented in the Beagle tool) using the {PostgreSQL} database system as the subject.},
	number = {2},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Godfrey, {M.W.} and Zou, Lijie},
	year = {2005},
	keywords = {and reengineering., Database systems, Documentation, Environmental management, History, Index Terms- Software evolution, Information analysis, merging, origin analysis, {PostgreSQL} database system, reasoning about programs, restructuring, reverse engineering, software development management, software maintenance, software system, Software systems, Software tools, source code entity, {SQL}, systems re-engineering},
	pages = {166--181},
	file = {Godfrey_TSE2005.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/WBAAFSWG/Godfrey_TSE2005.pdf:application/pdf;IEEE Xplore Abstract Record:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/2K7WPWSH/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/TTC3JEG6/Godfrey et Zou - 2005 - Using origin analysis to detect merging and splitt.pdf:application/pdf}
}

@inproceedings{khoshgoftaar_using_2000,
	title = {Using product, process, and execution metrics to predict fault-prone software modules with classification trees},
	doi = {10.1109/HASE.2000.895475},
	booktitle = {High Assurance Systems Engineering, 2000, Fifth {IEEE} International Symposim on. {HASE} 2000},
	author = {Khoshgoftaar, {T.M.} and Shan, R. and Allen, {E.B.}},
	year = {2000},
	keywords = {Classification tree analysis, classification trees, Computer science, decision rule, execution metrics, fault-prone software modules, Packaging, Predictive models, Principal component analysis, Process metrics, product metrics, regression-tree algorithm, Reliability engineering, Robustness, software engineering, software fault tolerance, software metrics, software quality, software quality classification models, S-Plus package, telecommunication computing, trees (mathematics), very large telecommunications system},
	pages = {301--310}
}

@inproceedings{nagappan_using_2007,
	address = {Washington, {DC}, {USA}},
	series = {{ESEM} '07},
	title = {Using Software Dependencies and Churn Metrics to Predict Field Failures: An Empirical Case Study},
	isbn = {0-7695-2886-4},
	url = {http://dx.doi.org/10.1109/ESEM.2007.87},
	doi = {10.1109/ESEM.2007.87},
	booktitle = {Proceedings of the First International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{IEEE} Computer Society},
	author = {Nagappan, Nachiappan and Ball, Thomas},
	year = {2007},
	keywords = {churn metrics, Computer architecture, Failure analysis, failure-proneness probability, field failure prediction, Operating systems, operating systems (computers), Programming, software architecture, software dependency, software development, software engineering, Software measurement, software metrics, software quality, software reliability, software system architecture, Software systems, Tree graphs, Windows Server 2003 operating system},
	pages = {364–373},
	file = {ChurnMetrics_ISESEM2007.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/FNANTJA9/ChurnMetrics_ISESEM2007.pdf:application/pdf;ChurnMetrics_ISESEM2007.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/ZM382AQP/ChurnMetrics_ISESEM2007.pdf:application/pdf}
}

@article{kitchenham_whats_2010,
	title = {What’s up with software metrics? – A preliminary mapping study},
	volume = {83},
	issn = {0164-1212},
	shorttitle = {{SI:} Top Scholars},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121209001599},
	doi = {10.1016/j.jss.2009.06.041},
	abstract = {Background 
Many papers are published on the topic of software metrics but it is difficult to assess the current status of metrics research. 
Aim 
This paper aims to identify trends in influential software metrics papers and assess the possibility of using secondary studies to integrate research results. 
Method 
Search facilities in the {SCOPUS} tool were used to identify the most cited papers in the years 2000–2005 inclusive. Less cited papers were also selected from 2005. The selected papers were classified according factors such as to main topic, goal and type (empirical or theoretical or mixed). Papers classified as {“Evaluation} studies” were assessed to investigate the extent to which results could be synthesized. 
Results 
Compared with less cited papers, the most cited papers were more frequently journal papers, and empirical validation or data analysis studies. However, there were problems with some empirical validation studies. For example, they sometimes attempted to evaluate theoretically invalid metrics and fail to appreciate the importance of the context in which data are collected. 
Conclusions 
This paper, together with other similar papers, confirms that there is a large body of research related to software metrics. However, software metrics researchers may need to refine their empirical methodology before they can answer useful empirical questions.},
	number = {1},
	urldate = {2012-11-07},
	journal = {Journal of Systems and Software},
	author = {Kitchenham, Barbara},
	month = jan,
	year = {2010},
	keywords = {Empirical evaluation problems, Influential papers, Literature survey, Mapping study, Secondary study, software metrics},
	pages = {37--51},
	file = {ScienceDirect Full Text PDF:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/PU7HSRDD/Kitchenham - 2010 - What’s up with software metrics – A preliminary m.pdf:application/pdf}
}

@inproceedings{kim_when_2005,
	address = {Washington, {DC}, {USA}},
	series = {{WCRE} '05},
	title = {When Functions Change Their Names: Automatic Detection of Origin Relationships},
	isbn = {0-7695-2474-5},
	url = {http://dx.doi.org/10.1109/WCRE.2005.33},
	doi = {10.1109/WCRE.2005.33},
	booktitle = {Proceedings of the 12th Working Conference on Reverse Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Kim, Sunghun and Pan, Kai and {Whitehead,Jr.}, E. James},
	year = {2005},
	pages = {143–152},
	file = {kim-wcre2005.pdf:/home/falleri/.zotero/zotero/9vbn458v.default/zotero/storage/NPNUJNFU/kim-wcre2005.pdf:application/pdf}
}