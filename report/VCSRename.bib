
@inproceedings{tu_integrated_2002,
	title = {An integrated approach for studying architectural evolution},
	doi = {10.1109/WPC.2002.1021334},
	abstract = {Studying how a software system has evolved over time is difficult, time consuming, and costly; existing techniques are often limited in their applicability, are hard to extend, and provide little support for coping with architectural change. The paper introduces an approach to studying software evolution that integrates the use of metrics, software visualization, and origin analysis, which is a set of techniques for reasoning about structural and architectural change. Our approach incorporates data from various statistical and metrics tools, and provides a query engine as well as a Web-based visualization and navigation interface. It aims to provide an extensible, integrated environment for aiding software maintainers in understanding the evolution of long-lived systems that have undergone significant architectural change. We use the evolution of {GCC} as an example to demonstrate the uses of various functionalities of {BEAGLE}, a prototype implementation of the proposed environment.},
	booktitle = {10th International Workshop on Program Comprehension, 2002. Proceedings},
	author = {Tu, Qiang and Godfrey, {M.W.}},
	year = {2002},
	keywords = {architectural change, architectural evolution, {BEAGLE}, Computer science, Data visualization, Engines, History, Internet, metrics, Navigation, origin analysis, program compilers, program visualisation, query engine, search engines, software architecture, software maintenance, software metrics, software prototyping, software system, Software systems, Software tools, software visualization, structural change, User interfaces, Web-based navigation interface, Web-based visualization interface},
	pages = {127--136},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/6EFSBZTM/login.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/5823WKWZ/Tu et Godfrey - 2002 - An integrated approach for studying architectural .pdf:application/pdf}
}

@article{chapin_types_2001,
	title = {Types of software evolution and software maintenance},
	volume = {13},
	copyright = {Copyright © 2001 John Wiley \& Sons, Ltd.},
	issn = {1532-0618},
	url = {http://onlinelibrary.wiley.com/doi/10.1002/smr.220/abstract},
	doi = {10.1002/smr.220},
	abstract = {The past two decades have seen increasing sophistication in software work. Now and in the future, the work of both practitioners and researchers would be helped by a more objective and finer granularity recognition of types of software evolution and software maintenance activities as actually done. To these ends, this paper proposes a clarifying redefinition of the types of software evolution and software maintenance. The paper bases the proposed classification not on people's intentions but upon objective evidence of maintainers' activities ascertainable from observation of activities and artifacts, and/or a before and after comparison of the software documentation. The classification includes taking into account in a semi-hierarchical manner evidence of the change or lack thereof in: (1) the software, (2) the documentation, (3) the properties of the software, and (4) the customer-experienced functionality. A comparison is made with other classifications and typologies. The paper provides a classified list of maintenance activities and a condensed decision tree as a summary guide to the proposed evidence-based classification of the types of software evolution and software maintenance. Copyright © 2001 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {1},
	urldate = {2014-02-18},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {Chapin, Ned and Hale, Joanne E. and Khan, Khaled Md. and Ramil, Juan F. and Tan, Wui-Gee},
	year = {2001},
	keywords = {empirical studies, evolution terminology, maintainer activities, maintenance terminology, software evolution management, software maintenance management, software support},
	pages = {3–30},
	file = {Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/VI3SMFWU/Chapin et al. - 2001 - Types of software evolution and software maintenan.pdf:application/pdf;Snapshot:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/3E5RMETI/full.html:text/html}
}

@misc{center_for_history_and_new_media_guide_????,
	title = {Guide rapide pour débuter},
	url = {http://zotero.org/support/quick_start_guide},
	author = {{Center for History and New Media}}
}

@inproceedings{canfora_identifying_2007,
	title = {Identifying Changed Source Code Lines from Version Repositories},
	doi = {10.1109/MSR.2007.14},
	abstract = {Observing the evolution of software systems at different levels of granularity has been a key issue for a number of studies, aiming at predicting defects or at studying certain phenomena, such as the presence of clones or of crosscutting concerns. Versioning systems such as {CVS} and {SVN}, however, only provide information about lines added or deleted by a contributor: any change is shown as a sequence of additions and deletions. This provides an erroneous estimate of the amount of code changed. This paper shows how the evolution of changes at source code line level can be inferred from {CVS} repositories, by combining information retrieval techniques and the Levenshtein edit distance. The application of the proposed approach to the {ArgoUML} case study indicates a high precision and recall.},
	booktitle = {Fourth International Workshop on Mining Software Repositories, 2007. {ICSE} Workshops {MSR} '07},
	author = {Canfora, G. and Cerulo, L. and Di Penta, M.},
	year = {2007},
	keywords = {{ArgoUML} snapshot, Cloning, Collaborative software, Collaborative work, concurrent versioning system, configuration management, crosscutting concern, Information analysis, information retrieval, Lab-on-a-chip, software evolution system, software prototyping, software reusability, Software systems, source code lines},
	pages = {14--14},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/THSGZIGB/abs_all.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/6SXIWTHW/Canfora et al. - 2007 - Identifying Changed Source Code Lines from Version.pdf:application/pdf}
}

@inproceedings{robbes_versioning_2005,
	title = {Versioning systems for evolution research},
	doi = {10.1109/IWPSE.2005.32},
	abstract = {Research in evolution goes on par with the use of versioning systems by developers of the case studies. There is a great diversity of versioning systems with advantages and disadvantages both from the technical as well as from the conceptual point of view. In this paper we analyze the currently used versioning systems from the point of view of a software evolution researcher. Thus we do not focus on whether a certain versioning system is technically better than another one, but rather on what kind of information it offers for software evolution research. We present a non-exhaustive list of dimensions that are important for performing research in software evolution, do a survey on the current main-stream versioning systems and discuss what is actually needed for future versioning systems to support both software evolution and the related research field.},
	booktitle = {Eighth International Workshop on Principles of Software Evolution},
	author = {Robbes, R. and Lanza, M.},
	month = sep,
	year = {2005},
	keywords = {{CD} recording, Computer industry, configuration management, {DVD}, History, Informatics, information retrieval, Open source software, Programming, software evolution research, software maintenance, Software performance, Software systems, software versioning system},
	pages = {155--164},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/MPZ2DEKE/abs_all.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/RUPRNZ9K/Robbes et Lanza - 2005 - Versioning systems for evolution research.pdf:application/pdf}
}

@article{godfrey_using_2005,
	title = {Using origin analysis to detect merging and splitting of source code entities},
	volume = {31},
	issn = {0098-5589},
	doi = {10.1109/TSE.2005.28},
	abstract = {Merging and splitting source code entities is a common activity during the lifespan of a software system; as developers rethink the essential structure of a system or plan for a new evolutionary direction, so must they be able to reorganize the design artifacts at various abstraction levels as seems appropriate. However, while the raw effects of such changes may be plainly evident in the new artifacts, the original context of the design changes is often lost. That is, it may be obvious which characters of which files have changed, but it may not be obvious where or why moving, renaming, merging, and/or splitting of design elements has occurred. In this paper, we discuss how we have extended origin analysis (Q. Tu et al., 2002), ({M.W.} Godfrey et al., 2002) to aid in the detection of merging and splitting of files and functions in procedural code; in particular, we show how reasoning about how call relationships have changed can aid a developer in locating where merges and splits have occurred, thereby helping to recover some information about the context of the design change. We also describe a case study of these techniques (as implemented in the Beagle tool) using the {PostgreSQL} database system as the subject.},
	number = {2},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Godfrey, {M.W.} and Zou, Lijie},
	year = {2005},
	keywords = {and reengineering., Database systems, Documentation, Environmental management, History, Index Terms- Software evolution, Information analysis, merging, origin analysis, {PostgreSQL} database system, reasoning about programs, restructuring, reverse engineering, software development management, software maintenance, software system, Software systems, Software tools, source code entity, {SQL}, systems re-engineering},
	pages = {166--181},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/W7DRHBJX/abs_all.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/BR3G49R2/Godfrey et Zou - 2005 - Using origin analysis to detect merging and splitt.pdf:application/pdf}
}

@article{mens_survey_2004,
	title = {A survey of software refactoring},
	volume = {30},
	issn = {0098-5589},
	doi = {10.1109/TSE.2004.1265817},
	abstract = {We provide an extensive overview of existing research in the field of software refactoring. This research is compared and discussed based on a number of different criteria: the refactoring activities that are supported, the specific techniques and formalisms that are used for supporting these activities, the types of software artifacts that are being refactored, the important issues that need to be taken into account when building refactoring tool support, and the effect of refactoring on the software process. A running example is used to explain and illustrate the main concepts.},
	number = {2},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Mens, T. and Tourwe, T.},
	year = {2004},
	keywords = {bibliographies, Buildings, coding technique, coding tools, construction tool, Costs, object-oriented programming, programming environment, programming environments, reverse engineering, software maintenance, software quality, software refactoring, software reusability, Software tools, Spirals, Taxonomy},
	pages = {126--139},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/4IQR585J/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/8A56ZP4C/Mens et Tourwe - 2004 - A survey of software refactoring.pdf:application/pdf}
}

@inproceedings{kim_field_2012,
	address = {New York, {NY}, {USA}},
	series = {{FSE} '12},
	title = {A Field Study of Refactoring Challenges and Benefits},
	isbn = {978-1-4503-1614-9},
	url = {http://doi.acm.org/10.1145/2393596.2393655},
	doi = {10.1145/2393596.2393655},
	abstract = {It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multi-year, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds that the binary modules refactored by this team experienced significant reduction in the number of inter-module dependencies and post-release defects, indicating a visible benefit of refactoring.},
	urldate = {2014-02-18},
	booktitle = {Proceedings of the {ACM} {SIGSOFT} 20th International Symposium on the Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
	year = {2012},
	keywords = {churn, component dependencies, defects, empirical study, refactoring, software evolution},
	pages = {50:1–50:11}
}

@inproceedings{kontogiannis_evaluation_1997,
	title = {Evaluation experiments on the detection of programming patterns using software metrics},
	doi = {10.1109/WCRE.1997.624575},
	abstract = {Cloning of code fragments in large systems is a common practice that may result in redundant code, higher maintenance costs, and less modular systems. The paper examines and evaluates the use of five data and control flow related metrics for identifying similar code fragments. The metrics are used as signatures for a code fragment. Matching on such signatures results in fast matching that can be used to locate instances of code cloning even in the presence of modifications such as changes in variable names, and insertion of statements. The paper takes an information retrieval approach and reports on experiments conducted for retrieving code fragments in three different software systems},
	booktitle = {Proceedings of the Fourth Working Conference on Reverse Engineering, 1997},
	author = {Kontogiannis, K.},
	month = oct,
	year = {1997},
	keywords = {Cloning, Clustering algorithms, code cloning, code fragment cloning, code fragment retrieval, control flow related metrics, Costs, Electric variables control, Euclidean distance, evaluation experiments, fast matching, information retrieval, information retrieval approach, maintenance costs, modular systems, pattern matching, programming pattern detection, redundant code, signature matching, similar code fragments, software maintenance, software metrics, software performance evaluation, software reusability, Software systems, variable names},
	pages = {44--54},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/4ANTVWEF/abs_all.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/724DV4NJ/Kontogiannis - 1997 - Evaluation experiments on the detection of program.pdf:application/pdf}
}

@inproceedings{lehman_metrics_1997,
	title = {Metrics and laws of software evolution-the nineties view},
	doi = {10.1109/METRIC.1997.637156},
	abstract = {The process of E-type software development and evolution has proven most difficult to improve, possibly due to the fact that the process is a multi-input, multi-output system involving feedback at many levels. This observation, first recorded in the early 1970s during an extended study of {OS/360} evolution, was recently captured in a {FEAST} (Feedback, Evolution And Software Technology) hypothesis: a hypothesis being studied in on-going two-year project, {FEAST/1.} Preliminary conclusions based on a study of a financial transaction system-Logica's Fastwire ({FW)-are} outlined and compared with those reached during the earlier {OS/360} study. The new analysis supports, or better does not contradict, the laws of software evolution, suggesting that the 1970s approach to metric analysis of software evolution is still relevant today. It is hoped that {FEAST/1} will provide a foundation for mastering the feedback aspects of the software evolution process, opening up new paths for process modelling and improvement},
	booktitle = {Software Metrics Symposium, 1997. Proceedings., Fourth International},
	author = {Lehman, {M.M.} and Ramil, {J.F.} and Wernick, P. D. and Perry, {D.E.} and Turski, {W.M.}},
	month = nov,
	year = {1997},
	keywords = {Chaos, Data analysis, Dynamic programming, Educational institutions, E-type software development, {FEAST/1} project, feedback, financial data processing, {FW} financial transaction system, Genetic programming, Informatics, Lehman's laws, Logica Fastwire, multi-input, multi-output system, Negative feedback, {OS/360}, Project management, software evolution, software maintenance, software metrics, software process dynamics, software process improvement, software process modelling, software technology, transaction processing, Uniform resource locators, World Wide Web},
	pages = {20--32},
	file = {IEEE Xplore Abstract Record:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/CVVDNQ8G/abs_all.html:text/html;IEEE Xplore Full Text PDF:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/NNQDWE7A/Lehman et al. - 1997 - Metrics and laws of software evolution-the ninetie.pdf:application/pdf}
}

@inproceedings{godfrey_tracking_2002,
	address = {New York, {NY}, {USA}},
	series = {{IWPSE} '02},
	title = {Tracking Structural Evolution Using Origin Analysis},
	isbn = {1-58113-545-9},
	url = {http://doi.acm.org.gate6.inist.fr/10.1145/512035.512062},
	doi = {10.1145/512035.512062},
	abstract = {Many long term studies of software evolution have made the simplifying assumption that the system's architecture and low-level structure is relatively stable. In our past work, we have found that this is often untrue; therefore, we have sought to investigate ways to detect and model structural change in software systems through a technique we call origin analysis [6] and supported a tool called Beagle [7]. In this position paper, we present a summary of our recent and ongoing work in this area, and we argue that more attention needs to be paid to techniques for understanding architectural and structural evolution of software systems.},
	urldate = {2014-02-05},
	booktitle = {Proceedings of the International Workshop on Principles of Software Evolution},
	publisher = {{ACM}},
	author = {Godfrey, Michael and Tu, Qiang},
	year = {2002},
	keywords = {software architecture, software evolution, structural change, supporting environments},
	pages = {117–119},
	annote = {Godfrey et al part2
 
L'intérêt des techniques de compréhension de l’évolution des architectures et structures des logiciels. 
Les logiciels à succès sont généralement amenés à évoluer dans le temps, à se restructurer etc, après découverte de bugs, l’ajout de fonctionnalités, l’adaptation à l’environnement dans lequel ils évoluent. Le maintient d’un tel logiciel passe par la compréhension des choix d’architecture pris par le passé, par son histoire.
Reexplique le fonctionnement de Origin Analysis, suggère que cette analyse devrait être semi automatique.
Considère leur tests comme juste mais ne les ont pas validés.},
	file = {p117-godfrey.pdf:/net/cremi/pchanson/.mozilla/firefox/7silwydx.default/zotero/storage/H6JRZ6NF/p117-godfrey.pdf:application/pdf}
}