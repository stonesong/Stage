\section{Introduction}
\label{sec:intro}

Software \emph{change metrics} measure how the artifacts of a software project have been modified during their life-cycle. For instance, the \emph{code churn} measures how much lines have been added or removed, and \emph{number of developers} measures how many developers did contribute to the artifact. The main hypothesis behind these metrics is that the manner in which the artifacts have been developed has a huge impact on their quality. Such an hypothesis have been confirmed in several studies. For instance, Bird et al. have shown that the ownership metrics, which are variants of the number of developers metric, are strongly correlated to the number of post-release defects in industrial software projects~\cite{bird_dont_2011}.

Contrarily to classical product metrics (such as \emph{number of methods}) which only require one version of a software project, change metrics require its history. Generally, software artifacts are seen as a sequence of versions, and change metrics are computed from measures performed on each version of the sequence. Generally, computing change metrics is straightforward when the projects are managed by a version control system (VCS), which is almost always the case.

However, retrieving the complete sequence of version of a software artifact is not always easy. Indeed, it is not rare that developers change the artifacts name during the project life-cycle. When such a situation occurs, relating the versions renamed artifact with the versions before its renaming is not easy. If the renaming is not taken into account, all its versions before renaming are lost and it can therefore have a huge effect on the change metrics values.  For example, if we imagine a project where all the artifacts have been renamed in the middle of its life-cycle, then needless to say that not considering this information will return skewed measure for the code churn or number of developers metrics. 

In theory, artifact renaming does have an impact on change metrics. In practice, how many renaming occurs? When do they occur? What is their impact on change metrics? This paper aims at answering these questions. To that extent, we perform an in-depth study of five real open source software projects. Our objective is first to provide descriptive statistics helping to understand the amount and location of artifact renaming in software projects. Then we assess the impact of taking into account renaming on the values of classical change metrics. Finally, based on our observations, we provide guidelines that will help researchers and practitioners to better compute change metrics.

Our results indicate that artifact renaming do occur in projects and can be intensive. We observed up to 99\% of renamed files in one project. We also observed renaming are most likely to happen in software development rather than in software maintenance. Finally, we also observed that it can significantly alter the values of change metrics, and therefore is a serious threat to the validity of studies using such metrics.

To sum-up, this article makes the following contributions:
\begin{itemize}
	\item A study of the artifact renaming phenomena made on five mature and popular open-source software projects.
	\item Detailed information on the amount and location of renaming.
	\item An analysis of the impact of taking into account renaming on the values of change metrics.
	\item A set of guidelines aiming at reducing the threat of artifact renaming when computing change metrics.
\end{itemize}

This paper is structured as follows: \secref{sec:changemetrics} explains how change metrics are computed and presents how the artifact renaming has an impact on them. \secref{sec:methodology} presents the detailed methodology of our study, including the construction of our corpus and the different analyses we realized. \secref{sec:results} presents the main results of our study which shows that the artifact renaming phenomena does occur and does have an impact on process metrics. This section also presents our guideline to limit the threat of process metrics. Finally, \secref{sec:threats} of our study and \secref{sec:conclusion} concludes this paper.





